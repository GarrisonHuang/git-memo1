安裝VSCODE /安裝GIT方式 /GIT指令操作(init/add/log/commit..)

1. 版本號
-git version

2. 寫入使用者資訊

-git config --global user.name garrison
-git config --global user.email conquerkwu715@gmail.com

3. 檢視設定資訊

-git config -- list

C:\Users\User\Desktop\Django Garrison\git\demo

4. 將目錄新增版本控管

-git init

5. 檔案狀態
-U (Untrack) 未被控管

6. 控管狀態
-git status

7.加入控管
-git add <filename>
	-*(所有確認)
	-U->A(added)已加入

(alarm 2:27 : 3.text 跑不出 object d8 重新整理 也跑不出 會不會是 3.text檔新增有誤)
(所以目錄跑不出 檔)

8. 看編碼object 內容
-git cat-file -p 內容 sha-1 xxxxxxx (前六碼 目錄+檔案名稱)
	      -t 型態 sha-1 xxxxxxx

9. 將暫存區資料儲存到倉庫
-git commit -m '第一次提交'
-修改上一次的commit
	- git commit --amend

10. 提交後產生兩個object 
	-commit(sha-1)
		-tree(sha-1)
			-files	
11.檢視提交的commit
	-git log

12.控管檔案修改後
	- M(modify)

13. 使用vim編輯器
	- 在command 按 i(進行編輯模式,開始編輯)
		- 開始編輯
	- esc鍵 
		- 使用:wq (寫入並離開)

(alarm 2:27: 離不開command 內容)

14. 預設為master分支
	-HEAD 永遠會指向分之最新的commit object

(alarm 2:39: 有head 沒有master)

15.手動刪除檔案後
	-恢復: git restore . (有點)
	-恢復: git add .

16. 自動刪除檔案
	-git rm -f<filename>
	- 恢復 : git restore --staged <file>
		-需要進行git restore/add

(alarm: 不能恢復)
(alarm: cls 清內容 q離開)

17. 將檔案移出暫存/倉庫
	-git rm --cached <filename>
		-檔案轉換成Untracked 模式

18.檢視目前分支
	-git branch
		-新增 <branch-name>
	-git branch -D <branch-name>
		-刪除分支
	-git branch -m <old><new>

19. 切換分支
	-git checkout <branch-name>
	-git checkout -b <branch-name>
		-新增分支跟切換

20. 合併分支
	-git merge <branch-name>
		-需切換到其他分支(master)
	-git merge --abort 
		-取消合併
	-衝突合併 (需確認以誰為主)



21. 切換commit
	- git checkout commit-object
	- 回到過去的修正
		-git checkout -b dev2
		-git add .
		-git commit

		-進行20. 合併分支

	-切換最後可以使用 git checkout master



22. 回到過去的commit 
	-git reset commit-object	
	-git reset -hard commit -object

23. 顯示所有的歷程
	-git reflog

24. 修改後恢復

1. git checkout . 

2. git reset --hard HEAD

3. git reset --hard HEAD~2

4. git reset --hard commit -object

25. 反悔 reset 
-git reset --hard ORIG_HEAD

26. 檢視雲端的倉庫url
-git remote -v
-git remote add origin https://github.com/GarrisonHuang/git-memo1.git

27.git push
	-本地端推送遠端倉庫
	-第一次遠端推送需要產生分支
		-git push origin -u master
	-第二次直接push
		-git push =>(master=> master)
	-強制更新
		-git push -f

28.演練
-產生分支
		-git branch dev
		-git checkout dev
-產生跟切換
		-git checkout -b dev

-切換分支到master
		-git checkout master
-將dev分支合併到master
		-git merge dev
-更新到雲端master 分支
		-git push
-刪除本地dev分支
		-git branch -D dev
-刪除遠端的分支
		-git push --delete origin dev

-使用到指令
(git checkout/log/branch/push/merge)

29.新增 READ.md 跟gitignore
	-README.md 使用markdown 語法

	-.gitignore
		-忽略不被控管的檔案
			-1.jpg
			-*.jpg
			-res/     (目錄)

30. 跟遠端相關指令
	-複製專案
		-git clone 
	-下載方式
		-進入網址直接下載(不包含.git)

	-git pull(從遠端更新到本地端)


31. 程式演練 (git pull)
	-公司電腦
		-專案新增command.txt
		-git add/git commit
		-git push

	-家裡電腦
		-初始專案
			-git clone專案路徑
		-已存在專案
			-git pull

31. 跟遠端相關指令
				


29.git pull




15. Python 
	-test.py
	-python 插件

產生一個分支 dev
-git branch dev
git checkout dev
-修改game.py (新增猜對時, 第幾次猜對提示)
-git add.
-git commit
-git merge (dev-master)


程式練習:
1. 新增4.txt (寫入456)
2. 修改1.txt (寫入789)
3. git status
4. git add?
5. git commit?
6. git log







